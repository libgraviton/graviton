# This file is a "template" of what your parameters.yml file should look like
parameters:
    graviton.api.generated_service_directory: '%kernel.root_dir%/services'

    graviton.mongodb.default.server.db: db
    graviton.mongodb.default.server.uri: ~

    graviton.log.path: "%kernel.logs_dir%/%kernel.environment%.log"

    # if set to a path, documentbundle will search this also for generated bundles
    # important: this should best be a path relative to the graviton root dir! (./app/../)
    graviton.generator.dynamicbundle.dir: null

    # Dependency injection in Security Bundle
    graviton.security.authentication.header_required: false
    graviton.security.authentication.test_username: false
    graviton.security.authentication.allow_anonymous: true
    graviton.security.authentication.strategy: graviton.security.authentication.strategy.cookie
    graviton.security.authentication.strategy.cookie.key: graviton_user
    graviton.security.authentication.strategy.subnet.key: 127.0.0.0/24
    graviton.security.authentication.strategy.subnet.header_field: x-graviton-authentication
    graviton.security.authentication.strategy.header.key: graviton_user

    graviton.security.authentication.provider.model: graviton.security.authentication.provider.model.noop
    graviton.security.authentication.provider.model.query_field: false

    graviton.security.query.filter_by_user: false
    graviton.security.query.filter_by_field: 'consultant.$id'

    graviton.security.services.whitelist: {}
    graviton.rest.special_mimetypes: {}

    graviton.router.host: null
    graviton.router.port_http: null
    graviton.router.port_https: null

    # service info injected by cloudfoundry
    vcap.services: ~

    mailer_transport:  smtp
    mailer_host:       127.0.0.1
    mailer_user:       ~
    mailer_password:   ~

    locale:            en

    # A secret key that's used to generate certain security-related tokens
    secret:            ThisTokenIsNotSoSecretChangeIt

    # may be either 'local' or any oher defined in oneup_flysystem.adapters.* in config.yml
    graviton.file.backend: local

    # rabbitmq config
    graviton.rabbitmq.host: localhost
    graviton.rabbitmq.port: 5672
    graviton.rabbitmq.user: guest
    graviton.rabbitmq.password: guest
    graviton.rabbitmq.vhost: /
    graviton.rabbitmq.consumer.dump.routingkeys:
        - 'document.#'
    # pagination defaults
    graviton.rest.pagination.limit: 10

    # how to call composer on this machine
    graviton.composer.cmd: composer

    # how to call git on this machine
    graviton.git.cmd: git

    graviton.proxy.httploader.curloptions: []

    graviton.proxy.swagger.sources: {}
    graviton.proxy.custom.sources: {}
    graviton.proxy.redirect.sources: {}

    # Add full qualified type, application/pdf, image/jpeg...
    graviton.file.allowed.mime_types: []

    # List of collections to be saved in cache, in seconds
    graviton.cache.collections:
        EventStatus: 60

    # caching related settings
    # doctrine_cache (*not* odm) caching service that should be used - used by our own components!
    # for redis use:
    #    graviton.cache.provider.service_id: doctrine_cache.providers.redis
    graviton.cache.provider.service_id: doctrine_cache.providers.local
    graviton.cache.redis.host: localhost
    graviton.cache.redis.port: 6379

    # and those are the *doctrine* specific parameters - default to array
    # redis example:
    #    doctrine.odm.cache.type: redis
    #    doctrine.odm.cache.class: Doctrine\Common\Cache\RedisCache
    #    doctrine.odm.cache.host: localhost
    #    doctrine.odm.cache.port: 6379
    #    doctrine.odm.cache.instance_class: Redis
    doctrine.odm.cache.type: array
    doctrine.odm.cache.class: null
    doctrine.odm.cache.host: null
    doctrine.odm.cache.port: 0
    doctrine.odm.cache.instance_class: null
