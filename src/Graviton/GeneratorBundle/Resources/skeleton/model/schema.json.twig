{

  "x-documentClass": {{ (base ~ 'Document\\' ~ document) | json_encode() }},

{% if json is defined %}
  "description": {{ json.getDescription()|json_encode() }},
{% else %}
  "description": "@todo replace me",
{% endif %}

{% if json is defined %}
  "x-variations": {{ json.getVariations()|json_encode() }},
{% else %}
  "x-variations": [],
{% endif %}

  "x-versioning": {{ isVersioning|json_encode() }},

{% if noIdField is not defined %}
  "x-id-in-post-allowed": false,
{% else %}
  "x-id-in-post-allowed": true,
{% endif %}

{% if json is defined %}
    "title": "{{ json.getTitle() }}",
{% endif %}

  "properties": {
{% set requiredFields = [] %}
{% set searchableFields = [] %}
{% set readOnlyFields = [] %}

{% if (not isEmbedded) or idFieldRequired %}
    {% set requiredFields = requiredFields|merge(['id']) %}
{% endif %}

{% for field in fields | filter(v => v.hidden == false and not (v.fieldName in reservedFieldnames)) %}
    "{{ field.fieldName }}": {
        "title": {{ field.title|json_encode() }},

{% if field.valuePattern is defined and not field.valuePattern is empty %}
        "pattern": {{ field.valuePattern|json_encode() }},
{% endif %}

{% if field.collection is defined and field.type == 'extref' %}
        "collection": {{ field.collection|json_encode() }},
{% endif %}

{% if field.readOnly is defined and field.readOnly == true %}
        "readOnly": {{ field.readOnly|json_encode() }},
{% endif %}

{% if field.recordOriginException is defined and field.recordOriginException == true %}
        "recordOriginException": {{ field.recordOriginException|json_encode() }},
{% endif %}

{% if field.constraints is defined and field.constraints != null %}
        "x-constraints": {{ field.constraints|json_encode() }},
{% endif %}


{% if field.description is defined and field.description != '' %}
        "description": {{ field.description|json_encode() }}
{% else %}
        "description": "@todo replace me"
{% endif %}

{% if field.required is defined and field.required == true %}
    {% set requiredFields = requiredFields|merge([field.fieldName]) %}
{% endif %}

{% if field.searchable is defined and field.searchable > 0 %}
    {% set searchableFields = searchableFields|merge([field.fieldName]) %}
{% endif %}

{% if field.readOnly is defined and field.readOnly == true %}
    {% set readOnlyFields = readOnlyFields|merge([field.fieldName]) %}
{% endif %}

    },
{% endfor %}
    "id": {
      "title": "ID",
      "description": "Unique identifier"
{% if isrecordOriginFlagSet %}
    },
    "recordOrigin": {
      "title": "record origin",
      "description": "A small string like 'core' to determine the record origin. Documents from some sources must not be modified. The 'core' value is defined as readonly by default."
{% endif %}
    }
  },

  "solr": {
      "fields": {{ solrFields|json_encode() }},
      "aggregate": {{ solrAggregate|json_encode() }}
  },

{#
the whole recordOrigin thing is kinda messed up as you need 2 vars to correctly detect what should be done.
for schema, we condense it so recordOriginModifiable holds the whole truth in one..
 #}
{% if (recordOriginModifiable is defined and recordOriginModifiable == "false") and
  (isrecordOriginFlagSet is defined and isrecordOriginFlagSet == true) %}
  "recordOriginModifiable": false,
{% else %}
  "recordOriginModifiable": true,
{% endif %}
  "required": {{ requiredFields|json_encode() }},
  "searchable": {{ searchableFields|json_encode() }},
  "readOnlyFields": {{ readOnlyFields|json_encode() }}
}
