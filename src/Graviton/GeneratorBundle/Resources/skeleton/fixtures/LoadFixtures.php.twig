<?php

namespace {{ base }}DataFixtures\MongoDB;

use Symfony\Component\DependencyInjection\ContainerAwareInterface;
use Symfony\Component\DependencyInjection\ContainerInterface;
use Doctrine\Common\DataFixtures\AbstractFixture;
use Doctrine\Common\DataFixtures\OrderedFixtureInterface;
use Doctrine\Common\Persistence\ObjectManager;

use {{ base }}Document\{{ document }};

/**
 * Load a example consultant and loads of fake data
 *
 * @license  http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link     http://swisscom.ch
 */
class Load{{ document }}Data extends AbstractFixture implements OrderedFixtureInterface, ContainerAwareInterface
{
    /**
     * @private ContainerInterface
     */
    private $container;

    /**
     * {@inheritDoc}
     *
     * @param ContainerInterface $container service_container
     *
     * @return void
     */
    public function setContainer(ContainerInterface $container = null)
    {
        $this->container = $container;
    }

    /**
     * {@inheritDoc}
     *
     * @param ObjectManager $manager Object Manager
     *
     * @return void
     */
    public function load(ObjectManager $manager)
    {
        $serializer = $this->container->get('serializer');
        $fixtures = json_decode('{{ fixtures_json }}');
        $refName = '$ref';
        $idName = '$id';

        if (count($fixtures) > 0) {
            foreach ($fixtures as $record) {

                $thisRecord = $serializer->deserialize(
                    json_encode($record),
                    '{{ base }}Document\{{ document }}',
                    'json'
                );

                // obvious refs..
                foreach ($record as $key => $val) {
                    if ($val instanceof \stdClass && isset($val->$refName) && isset($val->$idName)) {
                        $setterFunction = 'set'.ucfirst($key);
                        $thisRecord->$setterFunction($this->getReference($val->$refName.'-'.$val->$idName));
                    }

                    // cheap attempt for arrays..
                    if (is_array($val) && isset($val[0]->$refName) && isset($val[0]->$idName)) {
                        // clear first..
                        $setterFunction = 'set'.ucfirst($key);
                        $thisRecord->$setterFunction(array());

                        foreach ($val as $subkey => $subval) {
                            $addFunction = 'add'.ucfirst($key);
                            $thisRecord->$addFunction($this->getReference($subval->$refName.'-'.$subval->$idName));
                        }
                    }

                    // just as cheap attempt at objects
                    if (is_object($val) && isset($val->ref) && isset($val->ref->{'$ref'})) {
                        $setterFunction = 'set'.ucfirst($key);

                        $valueRecord = new \GravitonDyn\ModuleAppBundle\Document\ModuleApp;
                        $valueRecord->setRef($manager->find('Graviton\CoreBundle\Document\App', $val->ref->{'$id'}));

                        $thisRecord->$setterFunction($valueRecord);
                    }
                }

                $manager->persist($thisRecord);
                $manager->flush();

                if (isset($record->id) && strlen($record->id) > 0) {
                    $this->addReference('{{ document }}-'.$record->id, $thisRecord);
                }

            }
        }

        $manager->flush();
    }

    public function getOrder()
    {
        return {{ fixtureOrder }};
    }

}
