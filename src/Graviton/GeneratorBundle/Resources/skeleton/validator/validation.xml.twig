<?xml version="1.0" encoding="UTF-8"?>
<constraint-mapping xmlns="http://symfony.com/schema/dic/constraint-mapping"
                    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                    xsi:schemaLocation="http://symfony.com/schema/dic/constraint-mapping http://symfony.com/schema/dic/constraint-mapping/constraint-mapping-1.0.xsd">
    <class name="{{ base }}Document\{{ document }}">

{% if noIdField is not defined %}

        <property name="id">
            <constraint name='Graviton\RestBundle\Validator\Constraints\Id\IdInPost'/>
        </property>

{% endif %}


{% for field in fields %}

{# there is an xml error if we generate <property> without <constraint> child, that's why we build array first to check #}

    {% set thisCons = [] %}
    {% if field.required is defined and field.required == true %}
        {% if field.type != 'boolean' %}
            {%  set thisCons = thisCons|merge(['<constraint name="NotBlank"/>']) %}
        {% else %}
            {%  set thisCons = thisCons|merge(['<constraint name="NotNull"/>']) %}
        {% endif %}
    {% endif %}

    {% if field.readOnly is defined and field.readOnly == true %}
        {%  set thisCons = thisCons|merge(['<constraint name="Graviton\\RestBundle\\Validator\\Constraints\\ReadOnly\\ReadOnly"/>']) %}
    {% endif %}

    {% if field.type == 'boolean' %}
        {%  set thisCons = thisCons|merge(['<constraint name="Graviton\\RestBundle\\Validator\\Constraints\\BooleanStrict"/>']) %}
    {% endif %}

    {% if field.type == 'extref' %}
        {% set addedCon = '' %}
        {% set addedCon = addedCon ~ '<constraint name="Graviton\\RestBundle\\Validator\\Constraints\\ExtReference\\ExtReference">' %}

        {% if field.collection is defined and field.collection is not empty %}
            {% set addedCon = addedCon ~ '<option name="allowedCollections">' %}
            {% for allowedExtrefCollection in field.collection %}
                {% set addedCon = addedCon ~ '<value>' ~ allowedExtrefCollection ~ '</value>' %}
            {% endfor %}
            {% set addedCon = addedCon ~ '</option>' %}
        {% endif %}

        {% set addedCon = addedCon ~ '</constraint>' %}

        {% set thisCons = thisCons|merge([addedCon]) %}
    {% endif %}

    {% if field.type == 'int' %}
        {%  set thisCons = thisCons|merge(['<constraint name="Type"><option name="type">integer</option></constraint>']) %}
    {% endif %}

    {% if field.type == 'float' %}
        {%  set thisCons = thisCons|merge(['<constraint name="Type"><option name="type">float</option></constraint>']) %}
    {% endif %}

    {% if field.type == 'object' %}
        {% set addedCon = '' %}
        {% set addedCon = addedCon ~ '<constraint name="Type">' %}
        {% set addedCon = addedCon ~ '<option name="type">array</option>' %}
        {% set addedCon = addedCon ~ '<option name="message">This value should be of type object.</option>' %}
        {% set addedCon = addedCon ~ '</constraint>' %}

        {% set thisCons = thisCons|merge([addedCon]) %}
    {% endif %}

    {% if field.isClassType is defined and field.isClassType == true %}
        {%  set thisCons = thisCons|merge(['<constraint name="Valid"/>']) %}
    {% endif %}

    {% if field.constraints is defined and field.constraints is not empty %}
        {% for addedConstraint in field.constraints %}
            {% set addedCon = '' %}
            {% set addedCon = addedCon ~ '<constraint name="' ~ addedConstraint.name ~ '">' %}

            {% if addedConstraint.options is defined and addedConstraint.options is not empty %}
                {% for addedConstraintOption in addedConstraint.options %}
                    {% set addedCon = addedCon ~ '<option name="' ~ addedConstraintOption.name ~ '">' ~ addedConstraintOption.value ~ '</option>' %}
                {% endfor %}
            {% endif %}

            {% set addedCon = addedCon ~ '</constraint>' %}

            {% set thisCons = thisCons|merge([addedCon]) %}
        {% endfor %}
    {% endif %}

    {% if thisCons is not empty %}
        <property name="{{ field.fieldName }}">
            {{ thisCons|join("\n") }}
        </property>
    {% endif %}

{% endfor %}
    </class>
</constraint-mapping>
