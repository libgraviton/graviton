<?php
/**
 * abstract mapped superclass for {{ base }}Document\{{ document }}
 */

namespace {{ base }}Document;

use Doctrine\ODM\MongoDB\Mapping\Annotations as ODM;

/**
 * {{ base }}Document\{{ document }}Base
 *
 * @author   List of contributors <https://github.com/libgraviton/graviton/graphs/contributors>
 * @license  https://opensource.org/licenses/MIT MIT License
 * @link     http://swisscom.ch
 */
#[ODM\MappedSuperclass]
abstract class {{ document }}Base implements \Graviton\DocumentBundle\Document\ExtRefHoldingDocumentInterface, \ArrayAccess{% if isrecordOriginFlagSet %}, \Graviton\RestBundle\Model\RecordOriginInterface{% endif %}
{

    /*** arrayaccess stuff ***/

    public function offsetSet($offset, $value) : void {
        $this->{$offset} = $value;
    }

    public function offsetExists($offset) : bool {
        return isset($this->{$offset});
    }

    public function offsetUnset($offset) : void {
        // not supported
    }

    public function offsetGet($offset) : mixed {
        return isset($this->{$offset}) ? $this->{$offset} : null;
    }

    /**
    * @var int $fieldsAddedCount
    */
    private $fieldsAddedCount = {% if fields is iterable %}{{ fields|length }}{% else %}0{% endif %};

    public function isEmptyExtRefObject() : bool {
      return (
        $this->fieldsAddedCount === 1 &&
        is_callable([$this, 'getRef']) &&
        null === $this->getRef()
      );
    }

    public function getFieldsAddedCount() {
      return $this->fieldsAddedCount;
    }

    /**
    * @var Date $createdAt
    */
    #[ODM\Field(type: "date")]
    protected $_createdAt;

    public function get_CreatedAt()
    {
        return $this->_createdAt;
    }

    public function set_CreatedAt($createdAt)
    {
        $this->_createdAt = $createdAt;
    }

    /**
    * @var string $createdBy
    */
    #[ODM\Field(type: "string")]
    protected $_createdBy;

    public function get_CreatedBy()
    {
        return $this->_createdBy;
    }

    public function set_CreatedBy($createdBy)
    {
        $this->_createdBy = $createdBy;
    }

    /**
    * @var Date $lastModifiedAt
    */
    #[ODM\Field(type: "date")]
    protected $_lastModifiedAt;

    public function getLastModifiedAt()
    {
        return $this->_lastModifiedAt;
    }

    public function setLastModifiedAt($lastModifiedAt)
    {
        $this->_lastModifiedAt = $lastModifiedAt;
    }

    /**
    * @var string $lastModifiedBy
    */
    #[ODM\Field(type: "string")]
    protected $_lastModifiedBy;

    public function getLastModifiedBy()
    {
        return $this->_lastModifiedBy;
    }

    public function setLastModifiedBy($lastModifiedBy)
    {
        $this->_lastModifiedBy = $lastModifiedBy;
    }

    /**
    * @var \DateTime $deletedDate
    */
    #[ODM\Field(type: "date")]
    protected $deletedDate;

{% if isrecordOriginFlagSet %}
    /**
    * @var string $recordOrigin
    */
    #[ODM\Field(type: "string")]
    protected $recordOrigin;
{% endif %}

{% for field in fields|filter(v => not (v.fieldName in reservedFieldnames) ) %}
    /**
    {%~ if 'Graviton' in field.type %}
     * @var \{{ field.type }} ${{ field.fieldName }}
    {%~ else %}
     * @var {{ field.type }} ${{ field.fieldName }}
    {%~ endif %}
    */
    {{ doctrineFieldAnnotation(field) }}
    {%~ if field.type == 'array' %}
    protected ${{ field.fieldName }} = [];
    {%~ else %}
    protected ${{ field.fieldName }};
    {%~ endif %}

{% endfor %}

{% for syntheticField in syntheticFields %}
    {{ doctrineFieldAnnotation(syntheticField) }}
    protected ${{ syntheticField.name }};
{% endfor %}

    public function getDeleteddate()
    {
        return $this->deletedDate;
    }

{% if isrecordOriginFlagSet %}

    /**
    * Can record origin be modified
    *
    * @return bool true|false
    */
    public function isRecordOriginModifiable()
    {
        return {{ recordOriginModifiable }};
    }

    /**
    * Get recordOrigin
    *
    * @return string $recordOrigin
    */
    public function getRecordOrigin()
    {
        return $this->recordOrigin;
    }

    /**
    * Set recordOrigin
    *
    * @param string $recordOrigin origin of the record
    *
    * @return self
    */
    public function setRecordOrigin($recordOrigin)
    {
        $this->recordOrigin = $recordOrigin;
        return $this;
    }
{% endif %}


{% for field in fields|filter(v => not (v.fieldName in reservedFieldnames) ) %}

    /**
    * Get {{ field.fieldName }}
    *
{% if 'Graviton' in field.type %}
    * @return \{{ field.type }} ${{ field.fieldName }}
{% else %}
    * @return {{ field.type }} ${{ field.fieldName }}
{% endif %}
    */
{% if field.type == 'boolean' %}
    public function is{{ field.fieldName|capitalize }}()
{% else %}
    public function get{{ field.fieldName|capitalize }}()
{% endif %}
    {
        if ($this->{{ field.fieldName }} instanceof \Doctrine\Common\Collections\Collection) {
          $data = $this->{{ field.fieldName }}->toArray();
        } else {
          $data = $this->{{ field.fieldName }};
        }

        return $data;
    }

    /**
    * Set {{ field.fieldName }}
    *
{% if 'Graviton' in field.type %}
    * @param \{{ field.type }} ${{ field.fieldName }} object for {{ field.fieldName }}
{% else %}
    * @param {{ field.type }} ${{ field.fieldName }} value for {{ field.fieldName }}
{% endif %}
    *
    * @return self
    */
    {% if 'Graviton' in field.type %}
        {% if '[]' in field.type %}
            public function set{{ field.fieldName|capitalize }}(array ${{ field.fieldName }})
        {% else %}
            {% if field.relType is defined %}
                {% set relType = {"embed": "Embedded", "ref": ""}[field.relType] %}
            {% else %}
                {% set relType = "" %}
            {% endif %}

            public function set{{ field.fieldName|capitalize }}(\{{ field.type }}{{ relType }} ${{ field.fieldName }})
        {% endif %}
    {% else %}
        public function set{{ field.fieldName|capitalize }}(${{ field.fieldName }})
    {% endif %}
    {
        $this->{{ field.fieldName }} = ${{ field.fieldName }};

    return $this;
    }


    {% if ('[]' in field.type or field.type == 'array') %}
        {% set itemTypeName = '[]' in field.type ? field.type[0:-2] : 'mixed' %}
        {% set itemTypeHint = 'Graviton' in itemTypeName ? '\\' ~ itemTypeName : '' %}
        {% set itemTypeHint = 'GravitonDyn' in itemTypeName ? '\\' ~ itemTypeName ~ 'Base' : '' %}

        /**
        * add element to {{ field.fieldName }}
        *
        * @param {{ itemTypeName }} ${{ field.singularName }} value to add to {{ field.fieldName }}
        *
        * @return self
        */
        public function add{{ field.singularName|capitalize }}({{ itemTypeHint }} ${{field.singularName}})
        {
            if (!is_array($this->{{ field.fieldName }})) {
                $this->{{ field.fieldName }} = [];
            }
            $this->{{ field.fieldName }}[] = ${{ field.singularName }};
        }

        /**
        * remove element from {{ field.fieldName }}
        *
        * @param {{ itemTypeName }} ${{ field.singularName }} value to remove from {{ field.fieldName }}
        *
        * @return self
        */
        public function remove{{ field.singularName|capitalize }}({{ itemTypeHint }} ${{ field.singularName }})
        {
            {% if '[]' in field.type and 'Graviton' in field.type %}
                $this->{{ field.fieldName }}->removeElement(${{ field.singularName }});
            {% else %}
                $this->{{ field.fieldName }} = array_diff($this->{{ field.fieldName }}, [${{ field.singularName }}]);
            {% endif %}

            return $this;
        }
    {% endif %}
{% endfor %}

{% for syntheticField in syntheticFields %}
        public function set{{ syntheticField.name|capitalize }}(${{ syntheticField.name }}) {
            $this->{{ syntheticField.name }} = ${{ syntheticField.name }};
        }

        public function get{{ syntheticField.name|capitalize }}() {
            return $this->{{ syntheticField.name }};
        }
{% endfor %}

}
