<?xml version="1.0" encoding="UTF-8"?>
<container xmlns="http://symfony.com/schema/dic/services"
           xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
           xsi:schemaLocation="http://symfony.com/schema/dic/services http://symfony.com/schema/dic/services/services-1.0.xsd">
    <parameters>
        <parameter key="graviton.rest.routing.loader.class">Graviton\RestBundle\Routing\Loader\BasicLoader</parameter>
        <parameter key="graviton.rest.routing.collection.class">Symfony\Component\Routing\RouteCollection</parameter>
        <parameter key="graviton.rest.listener.selflinkresponselistener.class">Graviton\RestBundle\Listener\SelfLinkResponseListener</parameter>
        <parameter key="graviton.rest.serializer.serializercontext.class">JMS\Serializer\SerializationContext</parameter>
        <parameter key="graviton.rest.serializer.deserializercontext.class">JMS\Serializer\DeserializationContext</parameter>
        <parameter key="graviton.rest.listener.paginglinkresponselistener.class">Graviton\RestBundle\Listener\PagingLinkResponseListener</parameter>
        <parameter key="graviton.rest.objectslicer.class">Graviton\RestBundle\Utils\ObjectSlicer</parameter>
        <parameter key="graviton.rest.response.class">Symfony\Component\HttpFoundation\Response</parameter>
        <parameter key="graviton.rest.listener.corsresponselistener.class">Graviton\RestBundle\Listener\CorsResponseListener</parameter>
        <parameter key="graviton.rest.request.class">Symfony\Component\HttpFoundation\Request</parameter>
        <parameter key="graviton.rest.listener.xversionresponselistener.class">Graviton\RestBundle\Listener\XVersionResponseListener</parameter>
        <parameter key="graviton.rest.listener.rqlselectresponselistener.class">Graviton\RestBundle\Listener\RqlSelectResponseListener</parameter>
        <parameter key="graviton.rest.listener.rqlqueryrequestlistener.class">Graviton\RestBundle\Listener\RqlQueryRequestListener</parameter>
        <parameter key="graviton.rest.event.subscriber.class">Graviton\RestBundle\Subscriber\RestEventSubscriber</parameter>
        <parameter key="graviton.rest.validator.readonly.class">Graviton\RestBundle\Validator\Constraints\ReadOnly\ReadOnlyValidator</parameter>
        <parameter key="graviton.rest.validator.extref.class">Graviton\RestBundle\Validator\Constraints\ExtReference\ExtReferenceValidator</parameter>
        <parameter key="graviton.rest.model.documentmodel.class">Graviton\RestBundle\Model\DocumentModel</parameter>
        <parameter key="graviton.rest.services" type="collection"/>
        <parameter key="graviton.rest.listener.rqlqueryrequestlistener.allowedroutes" type="collection"/>
        <parameter key="graviton.rest.not_modifiable.origin.records" type="collection">
            <parameter type="string">core</parameter>
        </parameter>
    </parameters>
    <services>
        <!-- Serializer / Serializer context -->
        <service id="graviton.rest.serializer" alias="serializer">
            <call method="setSerializerContext">
                <argument type="service" id="graviton.rest.serializer.serializercontext"/>
            </call>
            <call method="setDeserializerContext">
                <argument type="service" id="graviton.rest.serializer.deserializercontext"/>
            </call>
        </service>
        <service id="graviton.rest.serializer.serializercontext"
                 class="%graviton.rest.serializer.serializercontext.class%">
            <call method="setSerializeNull">
                <argument type="constant">false</argument>
            </call>
        </service>
        <service id="graviton.rest.serializer.deserializercontext"
                 class="%graviton.rest.serializer.deserializercontext.class%">
            <call method="setSerializeNull">
                <argument type="constant">true</argument>
            </call>
        </service>

        <service id="graviton.rest.doctrine" alias="doctrine"/>
        <service id="graviton.rest.validator" alias="validator"/>
        <service id="graviton.rest.router" alias="router"/>

        <!-- Pagination -->
        <service id="graviton.rest.paginator" alias="knp_paginator"/>

        <!-- Object slicer -->
        <service id="graviton.rest.objectslicer" class="%graviton.rest.objectslicer.class%"/>

        <!-- Routing -->
        <!-- Routing collection -->
        <service id="graviton.rest.routing.collection" class="%graviton.rest.routing.collection.class%"/>

        <!-- Routing loader -->
        <service id="graviton.rest.routing.loader" class="%graviton.rest.routing.loader.class%">
            <argument type="service" id="graviton.rest.routing.collection"/>
            <argument>%graviton.rest.services%</argument>
            <tag name="routing.loader"/>
        </service>

        <!-- Service for validating JSON Patches -->
        <service id="graviton.rest.service.jsonpatchvalidator" class="Graviton\RestBundle\Service\JsonPatchValidator"/>

        <!-- Controller -->
        <service id="graviton.rest.controller" abstract="true">
            <argument type="service" id="graviton.rest.response" strict="false"/>
            <argument type="service" id="graviton.rest.restutils"/>
            <argument type="service" id="graviton.rest.router"/>
            <argument type="service" id="graviton.rest.validator"/>
            <argument type="service" id="templating"/>
            <argument type="service" id="form.factory"/>
            <argument type="service" id="graviton.document.form.type.document"/>
            <argument type="service" id="service_container"/>
            <argument type="service" id="graviton.schema.utils"/>
            <call method="setFormDataMapper">
                <argument type="service" id="graviton.document.service.formdatamapper"/>
            </call>
            <call method="setJsonPatchValidator">
                <argument type="service" id="graviton.rest.service.jsonpatchvalidator"/>
            </call>
        </service>

        <!-- Model -->
        <service id="graviton.rest.model" abstract="true" class="%graviton.rest.model.documentmodel.class%" parent="graviton.schema.model.schemamodel">
            <argument type="service" id="graviton.rql.visitor.mongodb" />
            <argument>%graviton.rest.not_modifiable.origin.records%</argument>
            <argument>%graviton.rest.pagination.limit%</argument>
        </service>

        <!-- Response object wrapper with scope request (get a new one for each request) -->
        <service id="graviton.rest.response" class="%graviton.rest.response.class%"/>

        <!-- Json Request listener -->
        <service id="graviton.rest.listener.jsonrequestlistener"
                 class="Graviton\RestBundle\Listener\JsonRequestListener">
            <tag name="kernel.event_listener" event="graviton.rest.request" method="onKernelRequest"/>
        </service>

        <!-- Special mimetypes Request listener -->
        <service id="graviton.rest.listener.specialmimetypesrequestlistener"
                 class="Graviton\RestBundle\Listener\SpecialMimetypeRequestListener">
            <argument type="service" id="service_container"/>
            <tag name="kernel.event_listener" event="graviton.rest.request" method="onKernelRequest"/>
        </service>

        <!-- restUtils service - a service providing some helpers dealing with services -->
        <service id="graviton.rest.restutils" class="Graviton\RestBundle\Service\RestUtils">
            <argument type="service" id="service_container"/>
            <argument type="service" id="router"/>
            <argument type="service" id="graviton.rest.serializer"/>
            <argument type="service" id="graviton.rest.serializer.serializercontext"/>
        </service>

        <!-- Graviton rest event stuff -->
        <!-- Rest event with scope prototype (get e new event object, every time you get it from the container) -->
        <service id="graviton.rest.event" class="Graviton\RestBundle\Event\RestEvent" scope="prototype">
        </service>

        <service id="graviton.rest.event.subscriber" class="%graviton.rest.event.subscriber.class%">
            <argument type="service" id="graviton.rest.response" strict="false" />
            <argument type="service" id="graviton.rest.event" strict="false" />
            <argument type="service" id="service_container" />
            <tag name="kernel.event_subscriber"/>
        </service>

        <!-- Graviton rest event listeners -->
        <!-- Paging listener -->
        <service id="graviton.rest.listener.paginglinkresponselistener" class="%graviton.rest.listener.paginglinkresponselistener.class%">
            <argument type="service" id="router"/>
            <tag name="kernel.event_listener" event="graviton.rest.response" method="onKernelResponse"/>
        </service>

        <!-- Self link response listener -->
        <service id="graviton.rest.listener.selflinkresponselistener" class="%graviton.rest.listener.selflinkresponselistener.class%">
            <argument type="service" id="router"/>
            <tag name="kernel.event_listener" event="graviton.rest.response" method="onKernelResponse"/>
        </service>

        <!-- Cors listener (move the addHeader calls somewhere else... -->
        <service id="graviton.rest.listener.corsresponselistener"
                 class="%graviton.rest.listener.corsresponselistener.class%">
            <call method="addHeader">
                <argument>Link</argument>
            </call>
            <call method="addHeader">
                <argument>Accept</argument>
            </call>
            <call method="addHeader">
                <argument>X-Requested-With</argument>
            </call>
            <call method="addHeader">
                <argument>Content-Type</argument>
            </call>
            <call method="addHeader">
                <argument>Origin</argument>
            </call>
            <call method="addHeader">
                <argument>Cache-Control</argument>
            </call>
            <call method="addHeader">
                <argument>ETag</argument>
            </call>
            <call method="addHeader">
                <argument>Date</argument>
            </call>
            <call method="addHeader">
                <argument>Access-Control-Allow-Methods</argument>
            </call>
            <call method="addHeader">
                <argument>Content-Language</argument>
            </call>
            <call method="addHeader">
                <argument>Location</argument>
            </call>
            <call method="addHeader">
                <argument>X-Total-Count</argument>
            </call>
            <tag name="kernel.event_listener" event="graviton.rest.response" method="onKernelResponse"/>
        </service>

        <!-- X-Version response listener -->
        <service id="graviton.rest.listener.xversionresponselistener"
                 class="%graviton.rest.listener.xversionresponselistener.class%">
            <argument type="service" id="graviton.core.utils"/>
            <argument type="service" id="logger"/>
            <tag name="kernel.event_listener" event="graviton.rest.response" method="onKernelResponse"/>
        </service>

        <!-- RQL select listener -->
        <service id="graviton.rest.listener.rqlselectresponselistener"
                 class="%graviton.rest.listener.rqlselectresponselistener.class%">
            <argument type="service" id="graviton.rest.objectslicer"/>
            <tag name="kernel.event_listener" event="graviton.rest.response" method="onKernelResponse"/>
        </service>

        <!-- RQL query listener (see RqlQueryDecoratorCompilerPass) -->
        <service id="graviton.rest.listener.rqlqueryrequestlistener"
                 class="%graviton.rest.listener.rqlqueryrequestlistener.class%"
                 decorates="graviton.rql.listener.request"
                 decoration-inner-name="graviton.rest.listener.rqlqueryrequestlistener.inner">
            <argument type="service" id="graviton.rest.listener.rqlqueryrequestlistener.inner"/>
            <argument>%graviton.rest.listener.rqlqueryrequestlistener.allowedroutes%</argument>
        </service>

        <!-- Validators -->
        <service id="graviton.rest.validator.readonly"
                 class="%graviton.rest.validator.readonly.class%">
            <argument type="service" id="doctrine_mongodb.odm.default_document_manager"/>
            <tag name="validator.constraint_validator" alias="graviton.rest.validator.readonly"/>
        </service>

        <service id="graviton.rest.validator.extref" class="%graviton.rest.validator.extref.class%">
            <tag name="validator.constraint_validator" alias="graviton.rest.validator.extref" />
        </service>
    </services>
</container>
